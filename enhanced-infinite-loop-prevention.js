// Enhanced Infinite Loop Prevention - Phase 1 Fix
// This will replace the current basic prevention in shouldGenerateResponseForEmail()

/**
 * Enhanced infinite loop prevention with comprehensive AI sender detection
 * Prevents AI from responding to its own emails or other automated systems
 */
function createEnhancedInfiniteLoopPrevention() {
  
  // Comprehensive AI sender patterns
  const aiSenderPatterns = [
    // User's main AI account
    'parthahir012001@gmail.com',
    
    // Generic AI service patterns
    'chief-ai@',
    'ai-assistant@',
    'auto-reply@',
    'automated@',
    'bot@',
    'noreply@',
    'no-reply@',
    'donotreply@',
    'do-not-reply@',
    
    // Common automated service domains
    '@mailchimp.com',
    '@sendgrid.net',
    '@amazonses.com',
    '@notifications.',
    '@alerts.',
    '@updates.',
    '@marketing.',
    
    // Calendar and meeting service patterns
    '@calendar-notification',
    '@calendly.',
    '@zoom.us',
    '@teams.microsoft.com',
    
    // Social media notifications
    '@facebookmail.com',
    '@linkedin.com',
    '@twitter.com',
    '@instagram.com'
  ];

  // Subject line patterns that indicate AI-generated content
  const aiSubjectPatterns = [
    '[AUTO-GENERATED]',
    '[AI RESPONSE]',
    '[AUTOMATED REPLY]',
    'RE: Meeting Response',
    'Calendar Invitation',
    'Meeting Confirmed',
    'Auto-Reply:',
    'Out of Office:',
    'Vacation Response:',
    'Automatic Reply:'
  ];

  // Body content patterns that indicate AI/automated origin
  const aiBodyPatterns = [
    'This email was automatically generated',
    'Auto-generated by Chief AI',
    'Automated response from',
    'This is an automated message',
    'Do not reply to this email',
    'This mailbox is not monitored',
    'Sent via automation',
    'Generated by AI Assistant',
    'Powered by Chief AI',
    'This email was sent automatically'
  ];

  // Headers that indicate automated emails
  const automatedHeaders = {
    'Auto-Submitted': 'auto-generated',
    'X-Auto-Response-Suppress': 'All',
    'Precedence': 'bulk',
    'List-Unsubscribe': true, // Presence indicates mailing list
    'X-Mailer': ['MailChimp', 'SendGrid', 'Constant Contact']
  };

  return {
    /**
     * Check if email is from AI/automated source to prevent infinite loops
     */
    isAIOrAutomatedEmail(email, userId) {
      const fromEmail = (email.from || '').toLowerCase();
      const subject = (email.subject || '').toLowerCase();
      const body = (email.body || '').toLowerCase();
      
      console.log(`üîç [LOOP PREVENTION] Checking email: "${subject}" from ${fromEmail}`);

      // 1. Check sender email patterns
      for (const pattern of aiSenderPatterns) {
        if (fromEmail.includes(pattern.toLowerCase())) {
          console.log(`üõë [LOOP PREVENTION] Blocked: AI sender pattern "${pattern}" detected`);
          return {
            isAI: true,
            reason: `AI sender pattern detected: ${pattern}`,
            confidence: 95
          };
        }
      }

      // 2. Check subject line patterns
      for (const pattern of aiSubjectPatterns) {
        if (subject.includes(pattern.toLowerCase())) {
          console.log(`üõë [LOOP PREVENTION] Blocked: AI subject pattern "${pattern}" detected`);
          return {
            isAI: true,
            reason: `AI subject pattern detected: ${pattern}`,
            confidence: 90
          };
        }
      }

      // 3. Check body content patterns
      for (const pattern of aiBodyPatterns) {
        if (body.includes(pattern.toLowerCase())) {
          console.log(`üõë [LOOP PREVENTION] Blocked: AI body pattern "${pattern}" detected`);
          return {
            isAI: true,
            reason: `AI body pattern detected: ${pattern}`,
            confidence: 85
          };
        }
      }

      // 4. Check for Gmail's own automated messages
      if (fromEmail.includes('mail-noreply@google.com') || 
          fromEmail.includes('@gmail.com') && subject.includes('security alert')) {
        console.log(`üõë [LOOP PREVENTION] Blocked: Google system email detected`);
        return {
          isAI: true,
          reason: 'Google system email detected',
          confidence: 100
        };
      }

      // 5. Check for emails that might be responses to our own emails
      if (subject.startsWith('re:') && body.length < 200) {
        // Short RE: emails might be automated responses
        const shortReplyPatterns = [
          'thanks', 'received', 'got it', 'ok', 'okay', 'sounds good',
          'will do', 'noted', 'acknowledged', 'confirmed'
        ];
        
        if (shortReplyPatterns.some(pattern => body.includes(pattern))) {
          console.log(`üõë [LOOP PREVENTION] Blocked: Potential automated short reply detected`);
          return {
            isAI: true,
            reason: 'Potential automated short reply',
            confidence: 70
          };
        }
      }

      // 6. Advanced: Check if email contains our own generated signatures/patterns
      const ourSignaturePatterns = [
        'best regards,\nchief ai',
        'generated with chief ai',
        'sent via ai assistant'
      ];

      for (const signature of ourSignaturePatterns) {
        if (body.includes(signature.toLowerCase())) {
          console.log(`üõë [LOOP PREVENTION] Blocked: Our own signature detected`);
          return {
            isAI: true,
            reason: 'Chief AI signature detected in email body',
            confidence: 100
          };
        }
      }

      console.log(`‚úÖ [LOOP PREVENTION] Email appears to be human-generated`);
      return {
        isAI: false,
        reason: 'No AI/automated patterns detected',
        confidence: 80
      };
    },

    /**
     * Enhanced filter for shouldGenerateResponseForEmail function
     */
    enhancedEmailFilter(email, userId) {
      // First run the AI detection
      const aiCheck = this.isAIOrAutomatedEmail(email, userId);
      
      if (aiCheck.isAI) {
        return {
          generate: false,
          reason: `INFINITE LOOP PREVENTION: ${aiCheck.reason}`,
          confidence: aiCheck.confidence
        };
      }

      // Continue with other filtering logic...
      return {
        generate: true,
        reason: 'Passed infinite loop prevention checks',
        confidence: aiCheck.confidence
      };
    }
  };
}

// Export for testing
module.exports = { createEnhancedInfiniteLoopPrevention };

// Test the enhanced prevention system
if (require.main === module) {
  console.log('üß™ Testing Enhanced Infinite Loop Prevention');
  console.log('=' .repeat(50));

  const prevention = createEnhancedInfiniteLoopPrevention();

  // Test cases
  const testEmails = [
    {
      from: 'parthahir012001@gmail.com',
      subject: 'Meeting Response',
      body: 'I\'m available for the meeting',
      expected: true // Should be blocked
    },
    {
      from: 'chief-ai@company.com',
      subject: 'Auto-Generated Response',
      body: 'This is an automated response',
      expected: true // Should be blocked
    },
    {
      from: 'john.doe@company.com',
      subject: 'Project Discussion',
      body: 'Can we discuss the project tomorrow?',
      expected: false // Should NOT be blocked
    },
    {
      from: 'notifications@linkedin.com',
      subject: 'Weekly Digest',
      body: 'Your weekly LinkedIn digest',
      expected: true // Should be blocked
    },
    {
      from: 'colleague@work.com',
      subject: '[AUTO-GENERATED] Meeting Invite',
      body: 'Please join the meeting',
      expected: true // Should be blocked (subject pattern)
    }
  ];

  testEmails.forEach((testEmail, index) => {
    console.log(`\nüß™ Test ${index + 1}: ${testEmail.from}`);
    const result = prevention.isAIOrAutomatedEmail(testEmail, 'test-user');
    const passed = result.isAI === testEmail.expected;
    
    console.log(`   Subject: "${testEmail.subject}"`);
    console.log(`   Expected blocked: ${testEmail.expected}`);
    console.log(`   Actually blocked: ${result.isAI}`);
    console.log(`   Reason: ${result.reason}`);
    console.log(`   Result: ${passed ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  });

  console.log('\nüéØ Enhanced infinite loop prevention ready for integration!');
}